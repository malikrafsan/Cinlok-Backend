// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum SexType {
  MALE
  FEMALE
}

enum Role {
  ADMIN
  USER
}

model User {
  id          Int           @id @default(autoincrement())
  name        String        @db.LongText
  description String        @db.LongText
  dateOfBirth DateTime
  latitude    Float
  longitude   Float
  sex         SexType
  profileUrl  String
  account     Account?
  userPhoto   UserPhoto[]
  userTag     UserTag[]
  pair        Pair[]        @relation("user")
  pairedUser  Pair[]        @relation("pairedUser")
  match       Match[]       @relation("user1")
  matchedUser Match[]       @relation("user2")
  userChannel UserChannel[]
}

model Account {
  id       Int    @id @default(autoincrement())
  email    String @unique
  username String @unique
  password String
  salt     String
  role     Role   @default(USER)
  user     User   @relation(fields: [id], references: [id])

  @@index([id])
}

model UserPhoto {
  id     Int    @id @default(autoincrement())
  fileId String
  user   User   @relation(fields: [userId], references: [id])
  userId Int
  index  Int

  @@unique([userId, index])
  @@unique([userId, fileId])
}

model Tag {
  id      Int       @id @default(autoincrement())
  tag     String    @unique
  UserTag UserTag[]
}

model UserTag {
  id     Int  @id @default(autoincrement())
  tag    Tag  @relation(fields: [tagId], references: [id])
  tagId  Int
  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@index([tagId])
  @@index([userId])
}

model Pair {
  id         Int      @id @default(autoincrement())
  userId     Int
  pairedId   Int
  hasMatched Boolean  @default(false)
  timestamp  DateTime

  user       User @relation("user", fields: [userId], references: [id])
  pairedUser User @relation("pairedUser", fields: [pairedId], references: [id])

  @@index([userId])
  @@index([pairedId])
}

model Match {
  id        Int      @id @default(autoincrement())
  userId1   Int
  userId2   Int
  timestamp DateTime

  user1 User @relation("user1", fields: [userId1], references: [id])
  user2 User @relation("user2", fields: [userId2], references: [id])

  @@index([userId2])
  @@index([userId1])
}

model UserChannel {
  userId    Int
  channelId Int

  assignedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  channel Channel @relation(fields: [channelId], references: [id])

  @@id([userId, channelId])
  @@index([channelId])
  @@index([userId])
}

model Channel {
  id          Int           @id @default(autoincrement())
  name        String
  userChannel UserChannel[]
}
